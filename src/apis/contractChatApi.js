// contractChatApi.js
import api from '@/apis'

const CONTRACT_CHAT_BASE = '/api/chat/contract'

function getAuthToken() {
  // üîß ÏàòÏ†ï: localStorage ÌÇ§ ÌÜµÏùº
  return localStorage.getItem('accessToken') || localStorage.getItem('access-token')
}

function getHeaders() {
  const token = getAuthToken()
  return {
    'Content-Type': 'application/json',
    Authorization: token ? `Bearer ${token}` : '',
  }
}

async function apiRequest(url, options = {}) {
  try {
    const method = options.method?.toLowerCase() || 'get'
    const headers = { ...getHeaders(), ...options.headers }
    const fullUrl = `${CONTRACT_CHAT_BASE}${url}`

    const config = {
      method,
      url: fullUrl,
      headers,
    }

    if (options.data) {
      config.data = options.data
    } else if (options.body) {
      config.data = typeof options.body === 'string' ? JSON.parse(options.body) : options.body
    }

    const response = await api(config)

    return response.data
  } catch (error) {
    console.error('API ÏóêÎü¨ ÏÉÅÏÑ∏:', {
      url: `${CONTRACT_CHAT_BASE}${url}`,
      method: options.method || 'GET',
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
      message: error.message,
    })

    const responseData = error.response?.data
    const isHtmlResponse =
      typeof responseData === 'string' && responseData.includes('<!doctype html>')

    if (isHtmlResponse) {
      return {
        success: false,
        message: `API ÏóîÎìúÌè¨Ïù∏Ìä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§ (${error.response?.status || 'Unknown'})`,
        data: null,
      }
    }

    // Íµ¨Ï°∞ÌôîÎêú JSON ÏóêÎü¨ ÏùëÎãµÏù∏ Í≤ΩÏö∞
    if (responseData && typeof responseData === 'object' && responseData.success !== undefined) {
      return responseData
    }

    // Í∏∞ÌÉÄ ÏóêÎü¨Ïùò Í≤ΩÏö∞
    return {
      success: false,
      message: error.response?.statusText || error.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§',
      data: null,
    }
  }
}

//apiPost Ìï®Ïàò Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨ Î∞©Ïãù ÏàòÏ†ï
const apiPost = (url, data = {}) => apiRequest(url, { method: 'POST', data })

// Í≥ÑÏïΩ Ï±ÑÌåÖÎ∞© ÏÉùÏÑ±
export const createContractChat = async (chatRoomId) => {
  return await apiRequest(`/rooms?chatRoomId=${chatRoomId}`, {
    method: 'POST',
  })
}

// Í≥ÑÏïΩ Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï°∞Ìöå
export const getContractMessages = async (contractChatId) => {
  if (!contractChatId) {
    console.error('contractChatIdÍ∞Ä ÏóÜÏäµÎãàÎã§')
    return {
      success: false,
      message: 'contractChatIdÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§',
      data: [],
    }
  }

  try {
    const result = await apiRequest(`/messages/${contractChatId}`)

    if (typeof result === 'string') {
      console.error('ÏòàÏÉÅÏπò Î™ªÌïú Î¨∏ÏûêÏó¥ ÏùëÎãµ:', result.substring(0, 100) + '...')
      return {
        success: false,
        message: 'APIÏóêÏÑú ÏûòÎ™ªÎêú ÌòïÏãùÏùò ÏùëÎãµÏùÑ Î∞õÏïòÏäµÎãàÎã§',
        data: [],
      }
    }

    return result
  } catch (error) {
    console.error('getContractMessages Ïã§Ìå®:', error)
    return {
      success: false,
      message: error.message || 'Î©îÏãúÏßÄ Ï°∞ÌöåÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§',
      data: [],
    }
  }
}

// ÌäπÏïΩ ÏãúÏûëÏ†ê ÏÑ§Ï†ï
export const setStartPoint = async (contractChatId) => {
  if (!contractChatId) {
    return {
      success: false,
      message: 'contractChatIdÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§',
    }
  }

  try {
    const result = await apiPost(`/${contractChatId}/start-point`)
    return result
  } catch (error) {
    console.error('setStartPoint Ïã§Ìå®:', error)
    return {
      success: false,
      message: error.message || 'ÏãúÏûëÏ†ê ÏÑ§Ï†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§',
    }
  }
}
// üîß Ï∂îÍ∞Ä: ÌäπÏïΩ Ï¢ÖÎ£å ÏöîÏ≤≠ Í±∞Ï†à (buyerÍ∞Ä Í±∞Ï†à Ïãú ÏÇ¨Ïö©)
export const rejectEndPointExport = async (contractChatId) => {
  if (!contractChatId) {
    return {
      success: false,
      message: 'contractChatIdÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§',
    }
  }

  try {
    const result = await apiPost(`/${contractChatId}/end-point-reject`)
    return result
  } catch (error) {
    console.error('rejectEndPointExport Ïã§Ìå®:', error)
    return {
      success: false,
      message: error.message || 'ÏöîÏ≤≠ Í±∞Ï†àÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§',
    }
  }
}

export const requestEndPointExport = async (contractChatId) => {
  if (!contractChatId) {
    return {
      success: false,
      message: 'contractChatIdÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§',
    }
  }

  try {
    const result = await apiPost(`/${contractChatId}/request-end`)
    return result
  } catch (error) {
    console.error('requestEndPointExport Ïã§Ìå®:', error)
    return {
      success: false,
      message: error.message || 'ÏöîÏ≤≠ Í±∞Ï†àÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§',
    }
  }
}

// ÌäπÏïΩ Ï¢ÖÎ£åÏ†ê ÏÑ§Ï†ï Î∞è ÎÇ¥Î≥¥ÎÇ¥Í∏∞
export const setEndPointAndExport = async (contractChatId) => {
  if (!contractChatId) {
    return {
      success: false,
      message: 'contractChatIdÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§',
    }
  }

  try {
    const result = await apiPost(`/${contractChatId}/end-point-export`)
    return result
  } catch (error) {
    console.error('setEndPointAndExport Ïã§Ìå®:', error)
    return {
      success: false,
      message: error.message || 'ÎÇ¥Î≥¥ÎÇ¥Í∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§',
    }
  }
}

// üîß Ï∂îÍ∞Ä: Í≥ÑÏïΩ Ï†ïÎ≥¥ Ï°∞Ìöå Ìï®Ïàò
export const getContractInfo = async (contractChatId) => {
  if (!contractChatId) {
    return {
      success: false,
      message: 'contractChatIdÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§',
      data: null,
    }
  }

  try {
    const result = await apiRequest(`/rooms/${contractChatId}/info`)
    return result
  } catch (error) {
    console.error('getContractInfo Ïã§Ìå®:', error)
    return {
      success: false,
      message: error.message || 'Í≥ÑÏïΩ Ï†ïÎ≥¥ Ï°∞ÌöåÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§',
      data: null,
    }
  }
}

// üîß Ï∂îÍ∞Ä: Í≥ÑÏïΩ Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï†ÑÏÜ° (HTTP API)
export const sendContractMessageHttp = async (messageData) => {
  const { contractChatId, senderId, receiverId, content, type = 'TEXT' } = messageData

  if (!contractChatId || !senderId || !receiverId || !content) {
    return {
      success: false,
      message: 'ÌïÑÏàò ÌååÎùºÎØ∏ÌÑ∞Í∞Ä ÎàÑÎùΩÎêòÏóàÏäµÎãàÎã§',
    }
  }

  try {
    const result = await apiPost(`/messages/${contractChatId}`, {
      senderId,
      receiverId,
      content,
      type,
    })
    return result
  } catch (error) {
    console.error('endContractMessageHttp Ïã§Ìå®:', error)
    return {
      success: false,
      message: error.message || 'Î©îÏãúÏßÄ Ï†ÑÏÜ°Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§',
    }
  }
}

export const getContractChatOnlineStatus = async (contractChatId) => {
  if (!contractChatId) {
    return {
      success: false,
      message: 'contractChatIdÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§',
      data: null,
    }
  }

  try {
    const result = await apiRequest(`/${contractChatId}/online-status`)
    return result
  } catch (error) {
    console.error('getContractChatOnlineStatus Ïã§Ìå®:', error)
    return {
      success: false,
      message: error.message || 'Ïò®ÎùºÏù∏ ÏÉÅÌÉú Ï°∞ÌöåÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§',
      data: null,
    }
  }
}

export const getSpecialContractForUser = async (contractChatId) => {
  try {
    const result = await apiRequest(`/special-contract/${contractChatId}`)
    return result.data.clauses
  } catch (error) {
    console.error('getSpecialContractForUser Ïã§Ìå®:', error)
  }
}
